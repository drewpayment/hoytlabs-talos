apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: cloudflared-app
  namespace: networking
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: infrastructure
  source:
    repoURL: 'https://bjw-s.github.io/helm-charts'
    chart: app-template
    targetRevision: 3.0.4
    helm:
      values: |
        controllers:
          cloudflared:
            replicas: 1
            strategy: RollingUpdate
            annotations:
              reloader.stakater.com/auto: "true"
            containers:
              app:
                image:
                  repository: docker.io/cloudflare/cloudflared
                  tag: 2025.4.2
                env:
                  NO_AUTOUPDATE: "true"
                  TUNNEL_CRED_FILE: /etc/cloudflared/creds/credentials.json
                  TUNNEL_METRICS: 0.0.0.0:8080
                  TUNNEL_ORIGIN_ENABLE_HTTP2: "true"
                  TUNNEL_TRANSPORT_PROTOCOL: quic
                  TUNNEL_POST_QUANTUM: "true"
                  TUNNEL_ID:
                    valueFrom:
                      secretKeyRef:
                        name: cloudflared-secret # Deployed by cloudflared-configs App
                        key: TUNNEL_ID
                # The cloudflared container's entrypoint needs to be or invoke a shell for $(TUNNEL_ID) to be substituted.
                # If not, cloudflared typically picks up TUNNEL_ID from the environment if 'run' is called without an ID.
                # You might simplify args to: ["tunnel", "--config", "/etc/cloudflared/config/config.yaml", "run"]
                # The following matches your original HelmRelease:
                args:
                  - tunnel
                  - --config
                  - /etc/cloudflared/config/config.yaml # Deployed by cloudflared-configs App
                  - run
                  - "$(TUNNEL_ID)"
                probes:
                  liveness: &probes
                    enabled: true
                    custom: true
                    spec:
                      httpGet:
                        path: /ready
                        port: &port 8080
                      initialDelaySeconds: 0
                      periodSeconds: 10
                      timeoutSeconds: 1
                      failureThreshold: 3
                  readiness: *probes
                securityContext:
                  allowPrivilegeEscalation: false
                  readOnlyRootFilesystem: true
                  capabilities: { drop: ["ALL"] }
                  seccompProfile:
                    type: RuntimeDefault
                resources:
                  requests:
                    cpu: 10m
                  limits:
                    memory: 256Mi
            pod:
              securityContext:
                runAsUser: 65534
                runAsGroup: 65534
                runAsNonRoot: true
        service:
          app:
            controller: cloudflared
            ports:
              http:
                port: *port
        serviceMonitor:
          app:
            serviceName: cloudflared # This should match the service name created by the app-template
            endpoints:
              - port: http
                scheme: http
                path: /metrics
                interval: 1m
                scrapeTimeout: 10s
        persistence:
          config:
            type: configMap
            name: cloudflared-configmap # Deployed by cloudflared-configs App
            globalMounts:
              - path: /etc/cloudflared/config/config.yaml
                subPath: config.yaml
                readOnly: true
          creds:
            type: secret
            name: cloudflared-secret
            globalMounts:
              - path: /etc/cloudflared/creds/credentials.json
                subPath: credentials.json
                readOnly: true
  destination:
    server: https://kubernetes.default.svc
    namespace: networking
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - ServerSideApply=true
    # Optionally, use sync waves if you set one on cloudflared-configs
    # commonAnnotations:
    #   argocd.argoproj.io/sync-wave: "0"